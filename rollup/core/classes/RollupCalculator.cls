@SuppressWarnings('PMD.NcssTypeCount')
public without sharing abstract class RollupCalculator {
  private Boolean isCDCUpdate = false;
  private Boolean isFirstTimeThrough = true;
  private Boolean isMultiCurrencyRollup;
  private Boolean isRecursiveRecalc = false;
  private final RollupRepository repo;

  protected final Object defaultVal;
  protected final SObjectField opFieldOnCalcItem;
  protected final SObjectField opFieldOnLookupObject;
  protected final SObjectField lookupKeyField;
  protected final Rollup__mdt metadata;
  protected final Boolean isChangedFieldCalc;
  protected final SObjectType calcItemSObjectType;

  protected Set<Object> distinctValues = new Set<Object>();
  protected List<Id> childrenIds = new List<Id>();
  protected Rollup.Op op;
  protected String lookupKeyQuery;
  protected String lookupRecordKey;
  protected Rollup.Evaluator eval;
  protected Boolean shouldShortCircuit = false;
  protected Object returnVal;
  protected Boolean isLastItem = false;
  protected Boolean shouldTriggerFullRecalc;
  protected String parentIsoCode;
  protected Boolean isFullRecalc = false;
  protected Boolean hasAlreadyRetrievedCalcItems = false;
  protected Boolean isDistinct = false;

  @TestVisible
  private static Factory testFactory;
  private static Boolean isGroupByRollup = false;

  public static Factory Factory {
    get {
      Factory = Factory ?? testFactory ?? new RollupCalculator.Factory();
      return Factory;
    }
    set;
  }

  public virtual class Factory {
    public virtual RollupCalculator getCalculator(
      Rollup.Op op,
      SObjectfield opFieldOnCalcItem,
      SObjectField opFieldOnLookupObject,
      Rollup__mdt metadata,
      SObjectField lookupKeyField
    ) {
      RollupCalculator calc;
      if (metadata.GroupByFields__c != null && isGroupByRollup == false) {
        return new GroupByCalculator(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
      }
      switch on op {
        when ALL, NONE, SOME {
          calc = new ConditionalCalculator(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
        }
        when AVERAGE, UPDATE_AVERAGE, DELETE_AVERAGE {
          calc = new AverageRollupCalculator(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
        }
        when COUNT_DISTINCT, UPDATE_COUNT_DISTINCT, DELETE_COUNT_DISTINCT {
          calc = new CountDistinctRollupCalculator(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
        }
        when COUNT, UPDATE_COUNT, DELETE_COUNT {
          calc = new CountRollupCalculator(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
        }
        when FIRST, UPDATE_FIRST, DELETE_FIRST, LAST, UPDATE_LAST, DELETE_LAST {
          calc = new FirstLastRollupCalculator(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
        }
        when MOST {
          calc = new MostRollupCalculator(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
        }
        when else {
          switch on (isGroupByRollup ? opFieldOnCalcItem : opFieldOnLookupObject).getDescribe().getType() {
            when Currency, Double, Integer, Long, Percent {
              calc = new DecimalRollupCalculator(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
            }
            when Combobox, Email, EncryptedString, Id, MultiPicklist, Phone, Picklist, Reference, String, TextArea, URL {
              calc = new PicklistRollupCalculator(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
            }
            when Date {
              calc = new DateRollupCalculator(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
            }
            when Time {
              calc = new TimeRollupCalculator(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
            }
            when Datetime {
              calc = new DatetimeRollupCalculator(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
            }
          }
        }
      }
      if (calc == null) {
        throw new IllegalArgumentException('Calculation not defined for parent field: ' + String.valueOf(opFieldOnLookupObject) + ' and op: ' + op);
      }

      return calc;
    }
  }

  protected RollupCalculator(
    Rollup.Op op,
    SObjectField opFieldOnCalcItem,
    SObjectField opFieldOnLookupObject,
    Rollup__mdt metadata,
    SObjectField lookupKeyField
  ) {
    this.opFieldOnLookupObject = opFieldOnLookupObject;
    this.opFieldOnCalcItem = opFieldOnCalcItem;
    this.op = op;
    this.metadata = metadata;
    this.lookupKeyField = lookupKeyField;
    this.defaultVal = getDefaultRecalculationValue(metadata);
    this.isMultiCurrencyRollup = this.isMultiCurrencyRollup ??
      RollupCurrencyInfo.isMultiCurrency() &&
      (this.opFieldOnCalcItem?.getDescribe().getType() == DisplayType.CURRENCY ||
      this.opFieldOnLookupObject?.getDescribe().getType() == DisplayType.CURRENCY);
    this.isChangedFieldCalc = String.isNotBlank(this.metadata.ChangedFieldsOnCalcItem__c);
    this.isDistinct = this.metadata.IsDistinct__c == true;
    this.calcItemSObjectType = opFieldOnCalcItem?.getDescribe().getSObjectType();
    this.repo = new RollupRepository(RollupMetaPicklists.getAccessLevel(this.metadata));
    this.updateAdvancedCurrencyMappings();
  }

  public virtual void setDefaultValues(String lookupRecordKey, Object priorVal) {
    this.shouldShortCircuit = false;
    this.lookupRecordKey = lookupRecordKey;
    this.returnVal = priorVal ?? this.defaultVal ?? RollupFieldInitializer.Current.getDefaultValue(this.opFieldOnLookupObject);
    this.lookupKeyQuery =
      this.lookupKeyField +
      ' = \'' +
      lookupRecordKey +
      '\'' +
      (String.isBlank(metadata.CalcItemWhereClause__c) ? '' : ' AND (' + metadata.CalcItemWhereClause__c + ')');
    this.childrenIds = new List<Id>();
    this.distinctValues = new Set<Object>();
  }

  public virtual Object getReturnValue() {
    return this.returnVal;
  }

  public void setCDCUpdate(Boolean isCDCUpdate) {
    this.isCDCUpdate = isCDCUpdate;
  }

  public void setEvaluator(Rollup.Evaluator eval) {
    this.eval = eval;
  }

  public void setFullRecalc(Boolean isFullRecalc) {
    this.isFullRecalc = isFullRecalc;
  }

  public void setHasAlreadyRetrievedCalcItems(Boolean hasAlreadyRetrievedCalcItems) {
    this.hasAlreadyRetrievedCalcItems = hasAlreadyRetrievedCalcItems;
  }

  public void setMultiCurrencyInfo(SObject parentRecord) {
    if (parentRecord.getPopulatedFieldsAsMap().containsKey(RollupCurrencyInfo.CURRENCY_ISO_CODE_FIELD_NAME)) {
      this.parentIsoCode = (String) parentRecord.get(RollupCurrencyInfo.CURRENCY_ISO_CODE_FIELD_NAME);
    }
  }

  public virtual void performRollup(List<SObject> calcItems, Map<Id, SObject> oldCalcItems) {
    // if we're already in a full recalc, we've got all the items we need already
    this.shouldTriggerFullRecalc = this.isFullRecalc == false;

    List<WinnowResult> winnowResults = this.winnowItems(calcItems, oldCalcItems);

    for (Integer index = 0; index < winnowResults.size(); index++) {
      this.isLastItem = index == winnowResults.size() - 1;
      WinnowResult result = winnowResults[index];
      Boolean doesNotMatch = result.matchesCurrent == false;
      if (doesNotMatch && result.hasOldItem) {
        doesNotMatch = doesNotMatch && result.matchesOld == false;
      }

      // it's only a full recalc situation if there are no items left after winnowing
      // otherwise, for even one item in the list, this should cause "shouldTriggerFullRecalc" to evaluate to false
      if (this.shouldTriggerFullRecalc) {
        this.shouldTriggerFullRecalc = doesNotMatch;
      }

      Object currentVal = result.currentValue;

      if (this.shouldShortCircuit) {
        this.handleShortCircuit(currentVal);
        continue;
      } else if (this.isCDCUpdate) {
        // here we don't exclude items because the calc items have already been updated
        this.childrenIds = new List<Id>();
        this.shouldTriggerFullRecalc = true;
        break;
      } else {
        switch on this.op {
          when COUNT_DISTINCT, DELETE_COUNT_DISTINCT {
            this.handleCountDistinct(result);
          }
          when UPDATE_COUNT_DISTINCT {
            this.handleUpdateCountDistinct(result);
          }
          when SUM, COUNT {
            this.handleSumOrCount(result);
          }
          when UPDATE_SUM, UPDATE_COUNT {
            this.handleUpdateSumOrCount(result);
          }
          when DELETE_SUM, DELETE_COUNT {
            this.handleDeleteSumOrCount(result);
          }
          when MIN {
            this.handleMin(result);
          }
          when MAX {
            this.handleMax(result);
          }
          when UPDATE_MAX, UPDATE_MIN, DELETE_MAX, DELETE_MIN {
            this.handleUpdateMinOrMax(result);
          }
          when CONCAT, CONCAT_DISTINCT {
            this.handleConcat(result);
          }
          when UPDATE_CONCAT, UPDATE_CONCAT_DISTINCT {
            this.handleUpdateConcat(result);
          }
          when DELETE_CONCAT, DELETE_CONCAT_DISTINCT {
            this.handleDeleteConcat(result);
          }
        }
      }

      if (this.shouldShortCircuit && this.isFirstTimeThrough) {
        /**
         * an example of short circuiting - halfway through the list during a MIN operation,
         * Rollup encounters a calcItem whose previous value equals the current min, but the new value
         * is greater than the min. This triggers a full recalc, since it is at once both possible
         * for items outside the list of calcItems to contain the new min, as WELL as for an item
         * WITHIN the existing calcItems to be the new min. This means we have to go back and re-process
         * the records that were already iterated on to ensure that the current operation successfully accounts
         * for everything in-memory and in the database
         */
        this.isFirstTimeThrough = false;
        if (index != 0 && calcItems.size() > 1) {
          index = 0; // resets the for-loop
        }
      }
    }
    // if there were no matching items, it's time for a full recalc (unless a RollupCalculator has overridden this method)
    // this means String, Number, and Datetime variant rollup calculations all need to correctly handle
    // recalculating via "calculateNewAggregateValue"
    if (this.shouldTriggerFullRecalc) {
      this.returnVal = this.calculateNewAggregateValue(this.op, this.childrenIds);
      // bail on calling setReturnValue below
      return;
    } else if (this.shouldTriggerFullRecalc == false && winnowResults.isEmpty() && this.isFullRecalc == false) {
      this.returnVal = this.defaultVal;
      return;
    }
    this.setReturnValue();
  }

  // all of these are no-ops by default; child classes opt-in to the rollup types applicable
  public virtual void handleCountDistinct(WinnowResult result) {
  }
  public virtual void handleUpdateCountDistinct(WinnowResult result) {
  }
  public virtual void handleSumOrCount(WinnowResult result) {
  }
  public virtual void handleUpdateSumOrCount(WinnowResult result) {
  }
  public virtual void handleDeleteSumOrCount(WinnowResult result) {
  }
  public virtual void handleMin(WinnowResult result) {
  }
  public virtual void handleMax(WinnowResult result) {
  }
  public virtual void handleUpdateMinOrMax(WinnowResult result) {
  }
  public virtual void handleConcat(WinnowResult result) {
  }
  public virtual void handleUpdateConcat(WinnowResult result) {
  }
  public virtual void handleDeleteConcat(WinnowResult result) {
  }
  protected virtual void handleShortCircuit(Object currentVal) {
  }
  protected virtual void setReturnValue() {
  }

  public class WinnowResult {
    Boolean hasOldItem = false;
    Boolean matchesCurrent = true;
    Boolean matchesOld = false;
    Object currentValue;
    Object priorValue;
    Boolean isReparented = false;
    public SObject item;

    public WinnowResult(SObject item) {
      this.item = item;
    }

    public WinnowResult(SObject item, Schema.SObjectField token) {
      this(item);
      this.currentValue = item.get(token);
    }
  }

  protected List<WinnowResult> winnowItems(List<SObject> items, Map<Id, SObject> oldCalcItems) {
    List<WinnowResult> winnowedItems = new List<WinnowResult>();
    this.transformForMultiCurrencyOrgs(items);
    if (oldCalcItems.isEmpty() == false && this.isMultiCurrencyRollup) {
      List<SObject> tempOldCalcItems = oldCalcItems.values();
      this.transformForMultiCurrencyOrgs(tempOldCalcItems);
      for (SObject oldCalcItem : tempOldCalcItems) {
        oldCalcItems.put(oldCalcItem.Id, this.getTransformedCalcItem(oldCalcItem));
      }
    }
    for (SObject item : items) {
      if (item.Id != null) {
        this.childrenIds.add(item.Id);
      }
      Boolean currentItemMatches = this.eval?.matches(item) != false;
      Boolean shouldAddToWinnowedItems = currentItemMatches;
      WinnowResult result = new WinnowResult(item);

      SObject potentialOldItem = oldCalcItems.get(item.Id);
      if (potentialOldItem != null) {
        result.hasOldItem = true;
        result.priorValue = this.getTransformedCalcItem(potentialOldItem).get(this.opFieldOnCalcItem);
        result.matchesOld = this.eval?.matches(potentialOldItem) != false;
        result.isReparented = this.isReparented(item, potentialOldItem);
      }

      if (currentItemMatches == false) {
        switch on this.op {
          // not all downstream updates for old item matching when new item doesn't have been defined
          // and this switch statement is how other operations opt-in
          when UPDATE_COUNT, UPDATE_CONCAT_DISTINCT, UPDATE_CONCAT, UPDATE_SUM {
            if (this.isChangedFieldCalc == false && result.matchesOld) {
              shouldAddToWinnowedItems = true;
            }
          }
        }
      }
      if (shouldAddToWinnowedItems) {
        result.matchesCurrent = currentItemMatches;
        Object currentVal = this.getTransformedCalcItem(item).get(this.opFieldOnCalcItem);
        result.currentValue = currentVal;
        if (this.isDistinct) {
          if (this.distinctValues.contains(currentVal)) {
            continue;
          }
          this.distinctValues.add(currentVal);
        }
        winnowedItems.add(result);
        if (this.op == Rollup.Op.SOME) {
          break;
        }
      }
    }
    List<RollupOrderBy__mdt> orderBys = this.metadata.LimitAmount__c != null && this.metadata.RollupOrderBys__r.isEmpty()
      ? new List<RollupOrderBy__mdt>{ new RollupOrderBy__mdt(FieldName__c = 'Id', Ranking__c = 0) }
      : this.metadata.RollupOrderBys__r;
    if (orderBys.isEmpty() == false) {
      winnowedItems.sort(new RollupCalcItemSorter(orderBys));
    }
    if (this.metadata.LimitAmount__c != null) {
      // we can only safely remove the items after sorting
      while (winnowedItems.size() > this.metadata.LimitAmount__c && winnowedItems.isEmpty() == false) {
        winnowedItems.remove(winnowedItems.size() - 1);
      }
      // Limit-based rollups always reset the field's value, and always act as a fresh start
      if (this.metadata.RollupOperation__c.contains('DELETE_') || this.metadata.RollupOperation__c.contains('UPDATE_')) {
        this.op = Rollup.Op.valueOf(this.metadata.RollupOperation__c.substringAfter('_'));
      }
    }

    return winnowedItems;
  }

  protected virtual Object calculateNewAggregateValue(Rollup.Op op, List<Object> objIds) {
    String operationName = Rollup.getBaseOperationName(op.name());
    String alias = operationName.toLowerCase() + 'Field';
    List<SObject> aggregate = this.tryQuery(new Set<String>{ operationName + '(' + this.opFieldOnCalcItem + ')' + alias }, objIds);
    return aggregate.isEmpty() == false ? aggregate[0].get(alias) : this.defaultVal;
  }

  protected Boolean isReparented(SObject calcItem, SObject oldCalcItem) {
    return oldCalcItem != null && calcItem?.get(this.lookupKeyField) != oldCalcItem.get(this.lookupKeyField);
  }

  protected Object performBaseCalculation(Rollup.Op op, List<Object> objIds) {
    this.returnVal = RollupFieldInitializer.Current.getDefaultValue(this.opFieldOnLookupObject);

    if (this.isRecursiveRecalc == false) {
      this.isRecursiveRecalc = true; // now we're cooking with gas
      Set<String> queryFields = this.getQueryFields();

      List<SObject> allOtherItems = this.tryQuery(queryFields, objIds);
      if (allOtherItems.isEmpty()) {
        // break out of recursion if there's nothing to calculate
        this.returnVal = this.defaultVal;
      } else {
        Rollup.Op baseOp = Rollup.Op.valueOf(Rollup.getBaseOperationName(op.name()));
        RollupCalculator calc = Factory.getCalculator(baseOp, this.opFieldOnCalcItem, this.opFieldOnLookupObject, this.metadata, this.lookupKeyField);
        calc.setDefaultValues(this.lookupRecordKey, this.returnVal);
        calc.parentIsoCode = this.parentIsoCode;
        calc.performRollup(allOtherItems, new Map<Id, SObject>());
        this.returnVal = calc.getReturnValue();
      }
    }
    return this.returnVal;
  }

  protected Set<String> getQueryFields() {
    Set<String> queryFields = new Set<String>{ String.valueOf(this.opFieldOnCalcItem), this.metadata.LookupFieldOnCalcItem__c };
    for (RollupOrderBy__mdt orderByInfo : this.metadata.RollupOrderBys__r) {
      queryFields.add(orderByInfo.FieldName__c);
    }
    if (String.isNotBlank(this.metadata.CalcItemWhereClause__c)) {
      queryFields.addAll(RollupEvaluator.getWhereEval(this.metadata.CalcItemWhereClause__c, this.calcItemSObjectType).getQueryFields());
    }
    return queryFields;
  }

  protected List<SObject> tryQuery(Set<String> queryFields, Object bindVar) {
    List<SObject> results;
    try {
      results = this.repo.setQuery(
          RollupQueryBuilder.Current.getQuery(this.calcItemSObjectType, new List<String>(queryFields), 'Id', '!=', this.lookupKeyQuery)
        )
        .setArg(bindVar)
        .get();
    } catch (System.QueryException qex) {
      results = this.repo.setQuery(RollupQueryBuilder.Current.getQuery(this.calcItemSObjectType, new List<String>(queryFields), 'Id', '!=')).get();
    }
    return results;
  }

  protected Boolean hasAlreadyBeenFullRecalcUpdated(Map<Id, SObject> oldCalcItems) {
    return this.returnVal != null && this.isFullRecalc && this.hasAlreadyRetrievedCalcItems == false && oldCalcItems.isEmpty();
  }

  private SObject getTransformedCalcItem(SObject calcItem) {
    return this.isMultiCurrencyRollup ? RollupCurrencyInfo.getCalcItem(calcItem, this.parentIsoCode) : calcItem;
  }

  private void transformForMultiCurrencyOrgs(List<SObject> calcItems) {
    if (this.isMultiCurrencyRollup) {
      RollupCurrencyInfo.transform(calcItems, this.opFieldOnCalcItem, this.parentIsoCode, this.metadata.RollupOrderBys__r);
    }
  }

  private void updateAdvancedCurrencyMappings() {
    if (this.metadata.CurrencyFieldMapping__c != null) {
      List<String> fieldMappings = this.metadata.CurrencyFieldMapping__c.split(',');
      for (Integer index = 0; index < fieldMappings.size(); index++) {
        fieldMappings[index] = fieldMappings[index].trim();
      }
      RollupCurrencyInfo.overrideDatedMultiCurrency(this.metadata.CalcItem__c, fieldMappings);
    }
  }

  private without sharing class CountDistinctRollupCalculator extends RollupCalculator {
    private Boolean isIdCount;
    public CountDistinctRollupCalculator(
      Rollup.Op op,
      SObjectfield opFieldOnCalcItem,
      SObjectField opFieldOnLookupObject,
      Rollup__mdt metadata,
      SObjectField lookupKeyField
    ) {
      super(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
    }

    public override void setDefaultValues(String lookupRecordKey, Object priorVal) {
      super.setDefaultValues(lookupRecordKey, priorVal);
      this.isIdCount = this.opFieldOnCalcItem.getDescribe().getName() == 'Id';
      Object defaultVal = RollupFieldInitializer.Current.getDefaultValue(opFieldOnLookupObject);
      if (defaultVal != 0 && this.returnVal != defaultVal && this.isIdCount == false) {
        this.distinctValues.add(this.returnVal);
      }
    }

    protected override void setReturnValue() {
      this.returnVal = this.distinctValues.size() == 0 ? this.defaultVal : Decimal.valueOf(this.distinctValues.size());
    }

    protected override void handleShortCircuit(Object currentVal) {
      if (currentVal != null && this.op != Rollup.Op.DELETE_COUNT_DISTINCT) {
        this.distinctValues.add(currentVal);
      }
    }

    public override void handleCountDistinct(WinnowResult result) {
      Object potentiallyNullValue = result.currentValue;
      if (this.op != Rollup.Op.DELETE_COUNT_DISTINCT && potentiallyNullValue != null) {
        this.distinctValues.add(potentiallyNullValue);
      } else if (this.op == Rollup.Op.DELETE_COUNT_DISTINCT) {
        this.distinctValues = new Set<Object>();
        this.calculateNewAggregateValue(this.op, new List<Id>{ result.item.Id });
      }
      this.shouldShortCircuit = true;
    }

    public override void handleUpdateCountDistinct(WinnowResult result) {
      this.shouldShortCircuit = true;
      this.handleShortCircuit(result.currentValue);
    }

    protected override Object calculateNewAggregateValue(Rollup.Op op, List<Object> objIds) {
      if (this.shouldTriggerFullRecalc == true) {
        this.distinctValues = new Set<Object>();
      }
      Boolean isArchivable = this.calcItemSObjectType == Task.SObjectType || this.calcItemSObjectType == Event.SObjectType;
      Boolean isGroupable = isArchivable == false && this.opFieldOnCalcItem.getDescribe().isGroupable();
      List<String> queryFields = new List<String>{ String.valueOf(this.opFieldOnCalcItem) };
      if (isGroupable) {
        queryFields.add('COUNT(' + (this.isIdCount ? '' : 'Id') + ')');
      }

      this.repo.setQuery(
          RollupQueryBuilder.Current.getQuery(
            this.calcItemSObjectType,
            queryFields,
            'Id',
            '!=',
            this.lookupKeyQuery + ('\nAND ' + this.opFieldOnCalcItem + ' != null')
          ) + (isGroupable && this.isIdCount == false ? ('\nGROUP BY ' + this.opFieldOnCalcItem) : '')
        )
        .setArg(objIds);

      if (this.isIdCount) {
        Integer result = this.repo.getCount();
        for (Integer index = 0; index < result; index++) {
          this.distinctValues.add(index);
        }
      } else {
        List<SObject> results = this.repo.get();
        String calcItemOpField = this.opFieldOnCalcItem.getDescribe().getName();
        for (SObject res : results) {
          // have to use the String representation of the this.opFieldOnCalcItem to avoid:
          // System.SObjectException: SObject.FieldName does not belong to SObject type AggregateResult
          this.distinctValues.add(res.get(calcItemOpField));
        }
      }
      return this.distinctValues.isEmpty() && this.defaultVal != null ? this.defaultVal : this.distinctValues.size();
    }
  }

  private without sharing virtual class DecimalRollupCalculator extends RollupCalculator {
    private Decimal returnDecimal;
    public DecimalRollupCalculator(
      Rollup.Op op,
      SObjectField opFieldOnCalcItem,
      SObjectField opFieldOnLookupObject,
      Rollup__mdt metadata,
      SObjectField lookupKeyField
    ) {
      super(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
    }

    public virtual override void setDefaultValues(String lookupRecordKey, Object priorVal) {
      super.setDefaultValues(lookupRecordKey, priorVal);
      if (this.returnVal instanceof Decimal) {
        this.returnDecimal = (Decimal) this.returnVal;
      }
    }

    protected virtual Decimal getDecimalOrDefault(Object potentiallyUninitialized) {
      if (potentiallyUninitialized instanceof Decimal) {
        return (Decimal) potentiallyUninitialized;
      } else {
        return potentiallyUninitialized == null ? 0.00 : 1.00;
      }
    }

    protected virtual Decimal getNumericValue(Object currentVal) {
      return this.getDecimalOrDefault(currentVal);
    }

    protected virtual Decimal getNumericChangedValue(WinnowResult result) {
      Decimal newVal = this.getNumericValue(result.currentValue);
      Decimal oldVal = this.getNumericValue(result.priorValue);

      if (this.isFullRecalc && result.matchesCurrent) {
        return newVal;
      } else if (this.isFullRecalc && result.matchesOld) {
        return 0;
      } else if (result.isReparented) {
        return result.matchesCurrent ? newVal : 0;
      } else if (result.matchesCurrent && result.matchesOld == false && this.isChangedFieldCalc == false && this.isFullRecalc == false) {
        return newVal;
      } else if (result.matchesCurrent == false && result.matchesOld && this.isChangedFieldCalc == false && this.isFullRecalc == false) {
        return oldVal * Decimal.valueOf(-1).setScale(oldVal.scale());
      }

      // could be negative, could be positive ... could be 0!
      return newVal - oldVal;
    }

    public virtual override Object getReturnValue() {
      if (this.returnVal == RollupFieldInitializer.Current.maximumLongValue || this.returnVal == RollupFieldInitializer.Current.minimumLongValue) {
        this.returnVal = 0.00;
      }
      if (this.returnVal == 0) {
        this.returnVal = this.metadata.FullRecalculationDefaultNumberValue__c != null ? this.metadata.FullRecalculationDefaultNumberValue__c : null;
      }
      return this.returnVal;
    }

    protected override void handleShortCircuit(Object currentVal) {
      switch on this.op {
        when UPDATE_MAX {
          // re-maxing by way of query has occurred, but is it **correct**?
          // if one of the other updated calcItems is numerically superior, assign the new max
          Decimal newVal = this.getNumericValue(currentVal);
          if (newVal > returnDecimal) {
            this.returnDecimal = newVal;
          }
        }
        when UPDATE_MIN {
          // re-"min"-ing has occurred by way of query, but is an in-memory calcItem even less?
          Decimal newVal = this.getNumericValue(currentVal);
          if (newVal < returnDecimal) {
            this.returnDecimal = newVal;
          }
        }
      }
    }

    public override void handleSumOrCount(WinnowResult result) {
      this.returnDecimal += this.getNumericValue(result.currentValue);
    }

    public override void handleUpdateSumOrCount(WinnowResult result) {
      this.returnDecimal += this.getNumericChangedValue(result);
    }

    public override void handleDeleteSumOrCount(WinnowResult result) {
      this.returnDecimal -= this.getNumericValue(result.currentValue);
    }

    public override void handleMax(WinnowResult result) {
      Decimal numericValue = this.getNumericValue(result.currentValue);
      if (numericValue > this.returnDecimal || this.returnDecimal == 0) {
        this.returnDecimal = numericValue;
      }
    }

    public override void handleMin(WinnowResult result) {
      Decimal numericValue = this.getNumericValue(result.currentValue);
      if (numericValue < this.returnDecimal || this.returnDecimal == 0) {
        this.returnDecimal = numericValue;
      }
    }

    public override void handleUpdateMinOrMax(WinnowResult result) {
      Decimal newVal = this.getNumericValue(result.currentValue);
      Decimal thisPriorVal = this.getNumericValue(result.priorValue);
      if (
        thisPriorVal != 0 &&
        thisPriorVal == this.returnDecimal &&
        (this.op.name().contains(Rollup.Op.MAX.name()) && newVal <= thisPriorVal ||
        this.op.name().contains(Rollup.Op.MIN.name()) && newVal >= thisPriorVal)
      ) {
        this.shouldShortCircuit = true;
        Object potentialReturnValue = this.calculateNewAggregateValue(this.op, this.childrenIds);
        this.returnDecimal = this.getDecimalOrDefault(potentialReturnValue);
        if (this.returnDecimal == 0 && this.op.name().contains('DELETE') == false) {
          this.returnDecimal = newVal;
        }
      } else if (this.op == Rollup.Op.UPDATE_MAX && newVal > this.returnDecimal) {
        this.returnDecimal = newVal;
      } else if (this.op == Rollup.Op.UPDATE_MIN && newVal < this.returnDecimal || this.returnDecimal == 0) {
        this.returnDecimal = newVal;
      }
    }

    protected override void setReturnValue() {
      if (this.shouldTriggerFullRecalc == false) {
        this.returnVal = this.returnDecimal;
      }
    }

    protected virtual override Object calculateNewAggregateValue(Rollup.Op op, List<Object> objIds) {
      Object aggregate;
      try {
        aggregate = super.calculateNewAggregateValue(op, objIds);
      } catch (Exception ex) {
        aggregate = this.performBaseCalculation(op, objIds);
      }
      // for count-based rollups, fine to use 0 in the event of no matches
      // but otherwise, it's more accurate to be nulling out the parent fields if there isn't a max, for example
      if (aggregate == 0 && op.name().contains('COUNT') == false) {
        aggregate = null;
      }
      return aggregate ?? this.defaultVal;
    }
  }

  private without sharing virtual class DatetimeRollupCalculator extends DecimalRollupCalculator {
    public DatetimeRollupCalculator(
      Rollup.Op op,
      SObjectfield opFieldOnCalcItem,
      SObjectField opFieldOnLookupObject,
      Rollup__mdt metadata,
      SObjectField lookupKeyField
    ) {
      super(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
    }

    public virtual override Object getReturnValue() {
      Object superReturnVal = super.getReturnValue();
      if (superReturnVal instanceof Decimal) {
        superReturnVal = Datetime.newInstance(((Decimal) superReturnVal).longValue());
      }
      return superReturnVal;
    }

    public virtual override void setDefaultValues(String lookupRecordKey, Object priorVal) {
      priorVal = priorVal ?? RollupFieldInitializer.Current.defaultDateTime;
      if (priorVal instanceof Datetime) {
        priorVal = ((Datetime) priorVal).getTime();
      }
      super.setDefaultValues(lookupRecordKey, priorVal);
    }

    protected virtual override Decimal getDecimalOrDefault(Object potentiallyUninitialized) {
      if (potentiallyUninitialized == null) {
        return RollupFieldInitializer.Current.defaultDateTime.getTime();
      }
      Datetime datetimeWithMs;
      if (potentiallyUninitialized instanceof String) {
        String potentialDatetimeValue = (String) potentiallyUninitialized;
        try {
          datetimeWithMs = Datetime.valueOf((String) potentialDatetimeValue);
        } catch (Exception ex) {
          datetimeWithMs = Datetime.newInstance(Date.valueOf(potentialDatetimeValue), Time.newInstance(0, 0, 0, 0));
        }
      } else if (potentiallyUninitialized instanceof Decimal) {
        datetimeWithMs = Datetime.newInstance(((Decimal) potentiallyUninitialized).longValue());
      } else {
        datetimeWithMs = (Datetime) potentiallyUninitialized;
      }

      return RollupFieldInitializer.Current.getApexCompliantDatetime(datetimeWithMs).getTime();
    }

    protected override Object calculateNewAggregateValue(Rollup.Op op, List<Object> excludedItems) {
      Object aggregate = super.calculateNewAggregateValue(op, excludedItems);
      if (aggregate instanceof Datetime) {
        aggregate = ((Datetime) aggregate).getTime();
      }
      return aggregate;
    }
  }

  private without sharing class DateRollupCalculator extends DatetimeRollupCalculator {
    public DateRollupCalculator(
      Rollup.Op op,
      SObjectField opFieldOnCalcItem,
      SObjectField opFieldOnLookupObject,
      Rollup__mdt metadata,
      SObjectField lookupKeyField
    ) {
      super(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
    }

    public override void setDefaultValues(String lookupRecordKey, Object priorVal) {
      if (priorVal instanceof Date) {
        priorVal = Datetime.newInstanceGmt((Date) priorVal, Time.newInstance(0, 0, 0, 0)).getTime();
      }
      super.setDefaultValues(lookupRecordKey, priorVal);
    }

    public override Object getReturnValue() {
      Object superReturnVal = super.getReturnValue();
      return superReturnVal == 0 ? this.defaultVal : ((Datetime) superReturnVal)?.dateGmt();
    }
  }

  private without sharing class TimeRollupCalculator extends DatetimeRollupCalculator {
    public TimeRollupCalculator(
      Rollup.Op op,
      SObjectField opFieldOnCalcItem,
      SObjectField opFieldOnLookupObject,
      Rollup__mdt metadata,
      SObjectField lookupKeyField
    ) {
      super(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
    }

    public override void setDefaultValues(String lookupRecordKey, Object priorVal) {
      if (priorVal instanceof Time) {
        priorVal = Datetime.newInstanceGmt(RollupFieldInitializer.Current.defaultDateTime.dateGmt(), (Time) priorVal);
      }
      super.setDefaultValues(lookupRecordKey, priorVal);
    }

    public override Object getReturnValue() {
      Object returnValue = super.getReturnValue();
      if (returnValue instanceof Datetime) {
        returnValue = ((Datetime) returnValue).timeGmt();
      } else if (returnValue == 0) {
        returnValue = this.defaultVal;
      }
      return returnValue;
    }

    protected override Decimal getDecimalOrDefault(Object potentiallyUninitialized) {
      Datetime defaultDatetime;
      if (potentiallyUninitialized instanceof Time) {
        defaultDatetime = Datetime.newInstanceGmt(RollupFieldInitializer.Current.defaultDateTime.dateGmt(), (Time) potentiallyUninitialized);
      } else if (potentiallyUninitialized instanceof Decimal) {
        defaultDatetime = Datetime.newInstance(((Decimal) potentiallyUninitialized).longValue());
      }
      return (defaultDatetime != null ? defaultDatetime : RollupFieldInitializer.Current.defaultDateTime).getTime();
    }
  }

  private without sharing class CountRollupCalculator extends DecimalRollupCalculator {
    public CountRollupCalculator(
      Rollup.Op op,
      SObjectfield opFieldOnCalcItem,
      SObjectField opFieldOnLookupObject,
      Rollup__mdt metadata,
      SObjectField lookupKeyField
    ) {
      super(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
    }

    public override Object getReturnValue() {
      this.setReturnValue();
      // we shouldn't encourage negative counts. it's totally possible as a rollup is implemented and updates happen before
      // inserts or deletes, but it doesn't really make sense in the context of tracking
      Integer potentialReturnVal = ((Decimal) super.getReturnValue())?.intValue();
      return potentialReturnVal < 0 ? 0.00 : potentialReturnVal;
    }

    protected override Decimal getNumericValue(Object currentVal) {
      return currentVal != null ? 1.00 : 0.00;
    }

    protected override Decimal getNumericChangedValue(WinnowResult result) {
      // for a reparenting, the item counts towards the new record on an update
      if (result.isReparented) {
        return result.matchesCurrent ? 1.00 : 0.00;
      }

      // for updates, we have to decrement the count if the value has been cleared out
      Decimal retVal = 0.00;
      Object current = result.currentValue;
      Object prior = result.priorValue;
      Object defaultVal = RollupFieldInitializer.Current.getDefaultValue(this.opFieldOnCalcItem);
      if (this.isFullRecalc && result.matchesCurrent) {
        retVal = 1.00;
      } else if (this.isFullRecalc && result.matchesOld) {
        retVal = 0;
      } else if (current == null && prior != null || result.matchesOld && result.matchesCurrent == false) {
        retVal = -1.00;
      } else if (current != defaultVal && prior == defaultVal || result.matchesOld == false && result.matchesCurrent || current != null && prior == null) {
        retVal = 1.00;
      } else if (current == false && prior == true) {
        retVal = -1.00;
      }
      return retVal;
    }
  }

  private without sharing abstract class DelimiterCalculator extends RollupCalculator {
    protected final String concatDelimiter;

    public DelimiterCalculator(
      Rollup.Op op,
      SObjectField opFieldOnCalcItem,
      SObjectField opFieldOnLookupObject,
      Rollup__mdt metadata,
      Schema.SObjectField lookupKeyField
    ) {
      super(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
      if (opFieldOnLookupObject.getDescribe().getType() == Schema.DisplayType.MULTIPICKLIST) {
        this.concatDelimiter = ';';
      } else if (this.metadata.ConcatDelimiter__c != null) {
        this.concatDelimiter = this.metadata.ConcatDelimiter__c;
      } else {
        this.concatDelimiter = ', ';
      }
    }
  }

  private without sharing virtual class StringRollupCalculator extends DelimiterCalculator {
    private String stringVal;

    private final Boolean isConcatDistinct;

    public StringRollupCalculator(
      Rollup.Op op,
      SObjectField opFieldOnCalcItem,
      SObjectField opFieldOnLookupObject,
      Rollup__mdt metadata,
      Schema.SObjectField lookupKeyField
    ) {
      super(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
      this.isConcatDistinct = this.op.name().contains(Rollup.Op.CONCAT_DISTINCT.name());
    }

    public virtual override void setDefaultValues(String lookupRecordKey, Object priorVal) {
      super.setDefaultValues(lookupRecordKey, this.isConcatDistinct ? '' : priorVal);
      if (this.returnVal instanceof String) {
        this.stringVal = (String) this.returnVal;
      }
    }

    protected override void setReturnValue() {
      if (this.op.name().contains(Rollup.Op.CONCAT.name())) {
        String trimmedDelimiter = this.concatDelimiter.trim();
        String possibleReturnValue = this.stringVal.normalizeSpace();
        while (possibleReturnValue.endsWith(trimmedDelimiter)) {
          possibleReturnValue = possibleReturnValue.substringBeforeLast(trimmedDelimiter).trim();
        }
        while (possibleReturnValue.startsWith(trimmedDelimiter)) {
          possibleReturnValue = possibleReturnValue.substringAfter(trimmedDelimiter).trim();
        }

        this.stringVal = possibleReturnValue.trim();
        this.sortAndConcat();
      }
      this.returnVal = this.stringVal;
    }

    protected override void handleShortCircuit(Object currentVal) {
      switch on this.op {
        when UPDATE_MAX, UPDATE_MIN {
          String newVal = String.valueOf(currentVal);
          if (this.isTrueFor(newVal, this.stringVal)) {
            this.stringVal = newVal;
          }
        }
        when DELETE_CONCAT_DISTINCT {
          this.handleConcatDistinctDelete(currentVal);
        }
      }
    }

    public override void handleConcat(WinnowResult result) {
      String newVal = String.valueOf(result.currentValue);
      if (this.shouldConcat(newVal)) {
        this.stringVal += this.concatWithDelimiter(newVal);
      }
    }

    public override void handleUpdateConcat(WinnowResult result) {
      String newVal = String.valueOf(result.currentValue);
      String priorString = String.valueOf(result.hasOldItem ? result.priorValue : newVal);
      if (result.matchesCurrent == false && result.hasOldItem && result.matchesOld) {
        this.handleDeleteConcat(result);
      } else if (this.shouldConcat(newVal) || priorString != newVal) {
        this.stringVal = this.replaceWithDelimiter(this.stringVal, this.isConcatDistinct ? '' : priorString, newVal);
      }
    }

    public override void handleDeleteConcat(WinnowResult result) {
      String existingVal = String.valueOf(result.currentValue);
      if (String.isBlank(existingVal)) {
        return;
      } else if (this.isConcatDistinct) {
        this.shouldShortCircuit = this.op.name().contains('DELETE');
        this.handleConcatDistinctDelete(existingVal);
      } else {
        this.stringVal = this.replaceWithDelimiter(this.stringVal, existingVal, '');
      }
    }

    public override void handleMin(WinnowResult result) {
      String newVal = String.valueOf(result.currentValue);
      if (this.isTrueFor(newVal, this.stringVal)) {
        this.stringVal = newVal;
      }
    }

    public override void handleMax(WinnowResult result) {
      this.handleMin(result);
    }

    public override void handleUpdateMinOrMax(WinnowResult result) {
      String newVal = String.valueOf(result.currentValue);
      String priorString = String.valueOf(result.hasOldItem ? result.priorValue : newVal);

      if (
        (this.op.name().contains(Rollup.Op.MAX.name()) && priorString == this.stringVal && newVal <= this.stringVal) ||
        (this.op.name().contains(Rollup.Op.MIN.name()) &&
        priorString == this.stringVal &&
        newVal >= this.stringVal)
      ) {
        this.shouldShortCircuit = true;
        Object potentialReturnValue = this.calculateNewAggregateValue(this.op, this.childrenIds);
        this.stringVal = potentialReturnValue == null ? '' : String.valueOf(potentialReturnValue);
      } else if (this.isTrueFor(newVal, this.stringVal)) {
        this.stringVal = newVal;
      }
    }

    protected override Object calculateNewAggregateValue(Rollup.Op op, List<Object> objIds) {
      this.stringVal = (String) super.performBaseCalculation(op, objIds);
      return this.stringVal;
    }

    protected virtual Boolean isTrueFor(String newVal, String priorVal) {
      Boolean isTrueFor = false;
      if (this.op.name().contains(Rollup.Op.MAX.name())) {
        isTrueFor = newVal > priorVal || String.isBlank(priorVal);
      } else if (this.op.name().contains(Rollup.Op.MIN.name())) {
        isTrueFor = newVal < priorVal || String.isBlank(priorVal);
      }
      return isTrueFor;
    }

    protected virtual void sort(List<String> values) {
      values.sort();
    }

    private void sortAndConcat() {
      List<String> values = this.stringVal.split(this.concatDelimiter);
      if (this.isConcatDistinct) {
        values = new List<String>(new Set<String>(values));
      }
      for (Integer index = values.size() - 1; index >= 0; index--) {
        if (String.isBlank(values[index])) {
          values.remove(index);
          continue;
        }
        if (this.metadata.SplitConcatDelimiterOnCalcItem__c == true) {
          List<String> splitValues = values[index].split(this.concatDelimiter);
          values.remove(index);
          for (String splitVal : splitValues) {
            if (values.contains(splitVal) == false) {
              values.add(splitVal);
            }
          }
        }
      }
      if (this.metadata.RollupOrderBys__r.isEmpty()) {
        this.sort(values);
      }
      this.stringVal = String.join(values, this.concatDelimiter);
    }

    private Boolean shouldConcat(String newVal) {
      return String.isNotBlank(newVal);
    }

    private String concatWithDelimiter(String newVal) {
      return (String.isBlank(this.stringVal) || this.stringVal.endsWith(this.concatDelimiter) ? '' : this.concatDelimiter) + newVal + this.concatDelimiter;
    }

    private String replaceWithDelimiter(String existingVal, String matchingVal, String replacementVal) {
      if (String.isNotBlank(matchingVal) && existingVal.contains(matchingVal)) {
        return existingVal.replace(matchingVal, replacementVal) + this.concatDelimiter;
      }
      return existingVal += this.concatDelimiter + replacementVal;
    }

    private void handleConcatDistinctDelete(Object currentVal) {
      // we do a replace first, in case this is a reparenting operation
      this.stringVal = this.replaceWithDelimiter(this.stringVal, (String) currentVal, '');
      // we have to wait till it's the last iteration; this is what ensures that all of the deleted items are excluded
      if (this.isLastItem) {
        List<SObject> relatedItems = this.repo.setArg(this.childrenIds)
          .setQuery(
            RollupQueryBuilder.Current.getQuery(
              this.calcItemSObjectType,
              new List<String>{ this.opFieldOnCalcItem.getDescribe().getName() },
              'Id',
              '!=',
              this.lookupKeyQuery
            )
          )
          .get();
        for (SObject relatedItem : relatedItems) {
          this.handleConcat(new WinnowResult(relatedItem, this.opFieldOnCalcItem));
        }
      }
    }
  }

  private without sharing class PicklistRollupCalculator extends StringRollupCalculator {
    private final RollupFieldInitializer.PicklistController picklistController {
      get {
        this.picklistController = this.picklistController ?? new RollupFieldInitializer.PicklistController(this.opFieldOnCalcItem.getDescribe());
        return this.picklistController;
      }
      set;
    }
    public PicklistRollupCalculator(
      Rollup.Op op,
      SObjectfield opFieldOnCalcItem,
      SObjectField opFieldOnLookupObject,
      Rollup__mdt metadata,
      Schema.SObjectField lookupKeyField
    ) {
      super(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
    }

    public override void setDefaultValues(String lookupRecordKey, Object priorVal) {
      super.setDefaultValues(lookupRecordKey, priorVal);
      if (
        this.op.name().contains('CONCAT') &&
        this.picklistController.isPicklist() &&
        this.stringVal == this.picklistController.getDefaultValue(this.opFieldOnCalcItem)
      ) {
        this.stringVal = '';
      }
    }

    protected override Boolean isTrueFor(String newVal, String priorVal) {
      if (this.picklistController.isPicklist() == false) {
        return super.isTrueFor(newVal, priorVal);
      } else if (this.picklistController.isMultiSelectPicklist()) {
        // this operation isn't valid in SOQL, but at this point we wouldn't let a thing like that slow us down ...
        Integer newValRank = 0;
        Integer priorValRank = 0;
        for (String pickVal : newVal.split(';')) {
          newValRank += this.picklistController.getRank(pickVal, this.op);
        }
        for (String priorPickVal : priorVal.split(';')) {
          priorValRank += this.picklistController.getRank(priorPickVal, this.op);
        }
        return this.op.name().contains(Rollup.Op.MIN.name()) ? newValRank < priorValRank : newValRank > priorValRank;
      }
      return this.picklistController.isTrueFor(newVal, priorVal, this.op);
    }

    protected override void sort(List<String> picklistValues) {
      if (this.picklistController.isPicklist() == false) {
        super.sort(picklistValues);
      } else {
        this.picklistController.sort(picklistValues);
      }
    }
  }

  private without sharing class AverageRollupCalculator extends RollupCalculator {
    public AverageRollupCalculator(
      Rollup.Op op,
      SObjectField opFieldOnCalcItem,
      SObjectField opFieldOnLookupObject,
      Rollup__mdt metadata,
      SObjectField lookupKeyField
    ) {
      super(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
    }
    public override void performRollup(List<SObject> calcItems, Map<Id, SObject> oldCalcItems) {
      List<SObject> applicableCalcItems = this.op == Rollup.Op.DELETE_AVERAGE ? new List<SObject>() : calcItems;
      List<WinnowResult> winnowResults = this.winnowItems(applicableCalcItems, oldCalcItems);
      Decimal oldSum;
      Decimal denominator = Decimal.valueOf(winnowResults.size());
      if (this.isFullRecalc == false || this.hasAlreadyBeenFullRecalcUpdated(oldCalcItems)) {
        denominator += this.repo.setQuery(RollupQueryBuilder.Current.getQuery(this.calcItemSObjectType, new List<String>(), 'Id', '!=', this.lookupKeyQuery))
          .setArg(calcItems)
          .getCount();
        oldSum = (Decimal) this.calculateNewAggregateValue(Rollup.Op.SUM, calcItems);
      }

      Decimal newSum = 0.00;
      for (WinnowResult result : winnowResults) {
        Object potentialDecimal = result.currentValue;
        newSum += (Decimal) potentialDecimal ?? 0.00;
      }

      Decimal average = (Decimal) this.defaultVal;
      // We can't do the division if the denominator is 0
      if (denominator != 0) {
        Decimal numerator = (oldSum ?? 0.00) + newSum;
        average = numerator / denominator;
      }
      this.returnVal = average;
    }
  }

  private without sharing class FirstLastRollupCalculator extends RollupCalculator {
    public FirstLastRollupCalculator(
      Rollup.Op op,
      SObjectField opFieldOnCalcItem,
      SObjectField opFieldOnLookupObject,
      Rollup__mdt metadata,
      SObjectField lookupKeyField
    ) {
      super(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
      Map<String, SObjectField> fieldMap = this.calcItemSObjectType.getDescribe().fields.getMap();
      for (RollupOrderBy__mdt orderByInfo : this.metadata.RollupOrderBys__r) {
        SObjectField orderByFirstLastField = fieldMap.get(orderByInfo.FieldName__c);
        this.isMultiCurrencyRollup =
          this.isMultiCurrencyRollup || (UserInfo.isMultiCurrencyOrganization() && orderByFirstLastField?.getDescribe().getType() == DisplayType.CURRENCY);
        if (this.isMultiCurrencyRollup) {
          break;
        }
      }
    }

    public override void performRollup(List<SObject> calcItems, Map<Id, SObject> oldCalcItems) {
      if (this.isFullRecalc == false || this.hasAlreadyBeenFullRecalcUpdated(oldCalcItems)) {
        Set<String> queryFields = this.getQueryFields();
        // a full-recalc is always necessary because we don't retain the information about the order by field
        // we have to exclude the current items on delete, otherwise they'll be incorrectly considered
        List<SObject> additionalItems = this.repo.setQuery(
            RollupQueryBuilder.Current.getQuery(this.calcItemSObjectType, new List<String>(queryFields), 'Id', '!=', this.lookupKeyQuery)
          )
          .setArg(calcItems)
          .get();
        switch on this.op {
          when DELETE_FIRST, DELETE_LAST {
            calcItems = additionalItems;
          }
          when else {
            calcItems.addAll(additionalItems);
          }
        }
      }

      List<WinnowResult> results = this.winnowItems(calcItems, oldCalcItems);

      if (results.isEmpty()) {
        this.returnVal = this.defaultVal;
      } else {
        Integer retrievalIndex = 0;
        switch on this.op {
          when LAST, UPDATE_LAST, DELETE_LAST {
            retrievalIndex = results.size() - 1;
          }
        }
        this.returnVal = results[retrievalIndex].currentValue;
      }
    }
  }

  private without sharing class MostRollupCalculator extends RollupCalculator {
    private Map<Object, Integer> occurrenceToCount = new Map<Object, Integer>();
    private Integer largestCountPointer;
    public MostRollupCalculator(
      Rollup.Op op,
      SObjectField opFieldOnCalcItem,
      SObjectField opFieldOnLookupObject,
      Rollup__mdt metadata,
      SObjectField lookupKeyField
    ) {
      super(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
    }

    public override void performRollup(List<SObject> calcItems, Map<Id, SObject> oldCalcItems) {
      this.occurrenceToCount = new Map<Object, Integer>();

      if (this.hasAlreadyBeenFullRecalcUpdated(oldCalcItems)) {
        calcItems.addAll(this.tryQuery(this.getQueryFields(), calcItems));
      }
      this.largestCountPointer = -1;
      this.returnVal = this.defaultVal;
      List<WinnowResult> results = this.winnowItems(calcItems, oldCalcItems);

      for (WinnowResult result : results) {
        Object value = result.currentValue;
        Integer localCount = 0;
        if (this.occurrenceToCount.containsKey(value)) {
          localCount = this.occurrenceToCount.get(value);
        }
        this.occurrenceToCount.put(value, ++localCount);
        if (this.largestCountPointer < localCount) {
          this.largestCountPointer = localCount;
          this.returnVal = value;
        }
      }
    }
  }

  private without sharing class ConditionalCalculator extends RollupCalculator {
    public ConditionalCalculator(
      Rollup.Op op,
      SObjectField opFieldOnCalcItem,
      SObjectField opFieldOnLookupObject,
      Rollup__mdt metadata,
      SObjectField lookupKeyField
    ) {
      super(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
    }

    public override void performRollup(List<SObject> calcItems, Map<Id, SObject> oldCalcItems) {
      List<WinnowResult> filteredItems = this.winnowItems(calcItems, oldCalcItems);
      Boolean matches = false;
      switch on this.op {
        when ALL {
          matches = calcItems.size() == filteredItems.size();
        }
        when NONE, SOME {
          Boolean isSome = this.op == Rollup.Op.SOME;
          matches = filteredItems.isEmpty() == (isSome == false);
          if (isSome && this.isTruthy() && oldCalcItems?.isEmpty() == true) {
            matches = true;
          }
        }
      }
      this.returnVal = null;

      if (this.defaultVal != null && matches == false) {
        this.returnVal = this.defaultVal;
        return;
      }

      switch on this.opFieldOnLookupObject.getDescribe().getType() {
        when CURRENCY, DOUBLE, INTEGER {
          this.returnVal = matches ? 1 : 0;
        }
        when STRING, TEXTAREA {
          this.returnVal = String.valueOf(matches);
        }
        when else {
          this.returnVal = matches;
        }
      }
    }

    private Boolean isTruthy() {
      return this.returnVal == true || this.returnVal == 1 || this.returnVal == 'true';
    }
  }

  private without sharing class GroupByCalculator extends DelimiterCalculator {
    private final GroupingFormatter formatter;
    private final System.Comparator<WinnowResult> sorter;
    private final RollupCalculator innerCalculator;
    private final List<String> fieldNames = new List<String>();
    private GroupByCalculator(
      Rollup.Op op,
      SObjectField opFieldOnCalcItem,
      SObjectField opFieldOnLookupObject,
      Rollup__mdt metadata,
      SObjectField lookupKeyField
    ) {
      super(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
      this.setupFields();
      // have to cast here to avoid "Incompatible types in ternary operator: RollupCalculator.DefaultGroupingFormatter, RollupCalculator.TableGroupingFormatter"
      this.formatter = this.metadata.IsTableFormatted__c == true
        ? (GroupingFormatter) new TableGroupingFormatter(opFieldOnCalcItem)
        : (GroupingFormatter) new DefaultGroupingFormatter(this.metadata, this.concatDelimiter, this.opFieldOnLookupObject);
      this.sorter = new RollupCalcItemSorter(this.fieldNames);
      isGroupByRollup = true;
      this.innerCalculator = Factory.getCalculator(op, opFieldOnCalcItem, opFieldOnLookupObject, metadata, lookupKeyField);
      isGroupByRollup = false;
    }

    public override void performRollup(List<SObject> calcItems, Map<Id, SObject> oldCalcItems) {
      // ceremony section - curry the values from this to the inner calculator
      this.innerCalculator.setEvaluator(this.eval);
      this.innerCalculator.setFullRecalc(this.isFullRecalc);
      this.innerCalculator.setCDCUpdate(this.isCDCUpdate);
      this.innerCalculator.setHasAlreadyRetrievedCalcItems(this.hasAlreadyRetrievedCalcItems);
      this.innerCalculator.parentIsoCode = this.parentIsoCode;
      this.innerCalculator.isMultiCurrencyRollup = this.isMultiCurrencyRollup;

      List<WinnowResult> results = this.winnowItems(calcItems, oldCalcItems);
      results.sort(this.sorter);

      Map<String, List<SObject>> groupingStringToItems = new Map<String, List<SObject>>();
      for (WinnowResult result : results) {
        String currentGrouping = '';
        for (Integer index = 0; index < this.fieldNames.size(); index++) {
          String fieldName = this.fieldNames[index];
          Boolean isFirst = index == 0;
          Boolean isLast = index == this.fieldNames.size() - 1;
          Object groupingVal = result.item.get(fieldName) ?? '(blank)';
          currentGrouping += this.formatter.getGroupingColumn(fieldName, groupingVal, isFirst, isLast);
        }
        List<SObject> groupedItems = groupingStringToItems.get(currentGrouping);
        if (groupedItems == null) {
          groupedItems = new List<SObject>();
          groupingStringToItems.put(currentGrouping, groupedItems);
        }
        groupedItems.add(result.item);
      }

      String newGroupingValue = this.formatter.getGroupingStart();
      for (String groupingKey : groupingStringToItems.keySet()) {
        this.innerCalculator.setDefaultValues(this.lookupRecordKey, RollupFieldInitializer.Current.getDefaultValue(this.opFieldOnCalcItem));
        this.innerCalculator.performRollup(groupingStringToItems.get(groupingKey), oldCalcItems);
        this.innerCalculator.setReturnValue();
        newGroupingValue += this.formatter.getGroupingRowStart(groupingKey) + this.innerCalculator.getReturnValue() + this.formatter.getGroupingRowEnd();
      }
      this.returnVal = String.isBlank(newGroupingValue) ? null : this.formatter.getGroupingEnd(newGroupingValue);
    }

    private void setupFields() {
      List<String> fieldNames = this.metadata.GroupByFields__c.split(',');
      for (String fieldName : fieldNames) {
        String trimmedFieldName = fieldName.trim();
        if (trimmedFieldName == RollupCurrencyInfo.CURRENCY_ISO_CODE_FIELD_NAME) {
          this.isMultiCurrencyRollup = false;
        }
        this.fieldNames.add(trimmedFieldName);
      }
    }
  }

  private interface GroupingFormatter {
    String getGroupingStart();
    String getGroupingColumn(String fieldName, Object groupingValue, Boolean isFirst, Boolean isLast);
    String getGroupingRowStart(String groupingKey);
    String getGroupingRowEnd();
    String getGroupingEnd(String groupByString);
  }

  private class DefaultGroupingFormatter implements GroupingFormatter {
    private final String delimiter;
    private final Rollup__mdt metadata;

    public DefaultGroupingFormatter(Rollup__mdt metadata, String delimiter, Schema.SObjectField opFieldOnLookupObject) {
      this.metadata = metadata;
      this.delimiter = delimiter;
      this.setupDelimiters(opFieldOnLookupObject);
    }

    public String getGroupingColumn(String fieldName, Object groupingValue, Boolean isFirst, Boolean isLast) {
      return String.valueOf(groupingValue) + this.delimiter;
    }

    public String getGroupingStart() {
      return '';
    }

    public String getGroupingRowStart(String groupingKey) {
      return this.metadata.GroupByRowStartDelimiter__c + groupingKey;
    }

    public String getGroupingRowEnd() {
      return this.metadata.GroupByRowEndDelimiter__c;
    }

    public String getGroupingEnd(String groupByString) {
      return groupByString.removeEnd(this.getGroupingRowEnd());
    }

    private void setupDelimiters(Schema.SObjectField opFieldOnLookupObject) {
      this.metadata.GroupByRowEndDelimiter__c = this.metadata.GroupByRowEndDelimiter__c ??
        (opFieldOnLookupObject.getDescribe().isHtmlFormatted() ? '<br>' : '\n');
      this.metadata.GroupByRowStartDelimiter__c = this.metadata.GroupByRowStartDelimiter__c ?? '• ';
    }
  }

  private class TableGroupingFormatter implements GroupingFormatter {
    private final Map<String, Schema.SObjectField> fieldNameToToken;
    private final Schema.SObjectField targetField;
    private final Set<String> columnHeaders = new Set<String>();

    private final String tdOpen = '<td>';
    private final String tdClose = '</td>';
    private final String thOpen = '<th>';
    private final String thClose = '</th>';
    private final String trOpen = '<tr>';
    private final String trClose = '</tr>';

    public TableGroupingFormatter(Schema.SObjectField targetField) {
      this.fieldNameToToken = targetField.getDescribe().getSObjectType().getDescribe().fields.getMap();
      this.targetField = targetField;
    }

    public String getGroupingColumn(String fieldName, Object groupingValue, Boolean isFirst, Boolean isLast) {
      String prefix = isFirst ? this.trOpen : '';
      String suffix = isLast ? this.trClose : '';
      this.columnHeaders.add(prefix + this.thOpen + this.fieldNameToToken.get(fieldName).getDescribe().getLabel() + this.thClose);
      if (isLast) {
        this.columnHeaders.add(this.thOpen + this.targetField.getDescribe().getName() + this.thClose + suffix);
      }
      return prefix + this.tdOpen + String.valueOf(groupingValue) + this.tdClose + suffix;
    }

    public String getGroupingStart() {
      return '<table>' + String.join(this.columnHeaders, '');
    }

    public String getGroupingRowStart(String groupingKey) {
      return groupingKey.replace(this.trClose, '') + this.tdOpen;
    }

    public String getGroupingRowEnd() {
      return this.tdClose + this.trClose;
    }

    public String getGroupingEnd(String groupByString) {
      return groupByString + '</table>';
    }
  }

  private static Object getDefaultRecalculationValue(Rollup__mdt meta) {
    // some operations could possibly use either default value
    // we also have to cast to Object to avoid the compilation error:
    // "Incompatible types in null coalescing operator: Decimal, String"
    return (Object) meta.FullRecalculationDefaultNumberValue__c ?? (Object) meta.FullRecalculationDefaultStringValue__c;
  }
}
