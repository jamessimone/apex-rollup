global without sharing virtual class RollupSObjectUpdater {
  @TestVisible
  private static String UPDATER_NAME = 'RollupCustomUpdater';
  @TestVisible
  private static String PRE_AND_POST_UPDATER_NAME = 'RollupPreAndPostUpdater';
  @TestVisible
  private static final String DISPATCH_NAME = 'RollupDispatch';
  private static final SObjectTypeSorter SORTER = new SObjectTypeSorter();
  @TestVisible
  private static final Map<Id, SObject> RECORDS_TO_UPDATE = new Map<Id, SObject>();

  private final Schema.SObjectField fieldToken;
  private final List<IDispatcher> dispatchers;
  private final RollupPlugin plugin;

  private Boolean forceSyncUpdate = false;
  private RollupControl__mdt rollupControl;

  global interface IDispatcher {
    void dispatch(List<SObject> records);
  }

  global interface IUpdater {
    void performUpdate(List<SObject> recordsToUpdate, Database.DMLOptions options);
  }

  global interface IPrePostUpdater {
    void preUpdate(List<SObject> recordsToUpdate, Database.DMLOptions options);
    void postUpdate(List<SObject> recordsToUpate);
  }

  global RollupSObjectUpdater() {
    this.plugin = new RollupPlugin();
    this.dispatchers = this.fillDispatchers();
  }

  public void addRollupControl(RollupControl__mdt rollupControl) {
    this.rollupControl = rollupControl;
  }

  public void forceSyncUpdate() {
    this.forceSyncUpdate = true;
  }

  public void updateRecords() {
    List<SObject> recordsToUpdate = RECORDS_TO_UPDATE.values();
    // static map has to be cleared BEFORE calling "doUpdate"
    // otherwise any cascading rollups on the parent will cause recursion here
    RECORDS_TO_UPDATE.clear();
    this.doUpdate(recordsToUpdate);
  }

  global virtual void doUpdate(List<SObject> recordsToUpdate) {
    if (this.forceSyncUpdate == false && Rollup.hasExceededCurrentRollupLimits(this.rollupControl)) {
      this.performAsyncUpdate(recordsToUpdate);
      return;
    }
    this.winnowRecords(recordsToUpdate);
    this.splitUpdates(recordsToUpdate);
    // typically I wouldn't advocate for the use of a guard clause here since an empty list
    // getting updated is a no-op, but the addition of the logging item is annoying ...
    if (recordsToUpdate.isEmpty() == false) {
      RollupLogger.Instance.log('updating ' + recordsToUpdate.size() + ' records', LoggingLevel.INFO);
      recordsToUpdate.sort(SORTER);
      Database.DMLOptions dmlOptions = new Database.DMLOptions();
      dmlOptions.AllowFieldTruncation = true;
      if (this.rollupControl.ShouldDuplicateRulesBeIgnored__c != false) {
        dmlOptions.DuplicateRuleHeader.AllowSave = true;
      }
      this.updateRecords(recordsToUpdate, dmlOptions);
      this.dispatch(recordsToUpdate);
    }
  }

  public void updateField(Schema.SObjectField fieldToken, SObject record, Object value) {
    Schema.DisplayType fieldType = fieldToken.getDescribe().getType();

    if (value instanceof Decimal && fieldType == DisplayType.INTEGER) {
      Decimal decimalValue = (Decimal) value;
      value = decimalValue.intValue();
    } else {
      Boolean valueIsString = value instanceof String;
      switch on fieldType {
        when STRING, TEXTAREA {
          if (valueIsString == false) {
            value = String.valueOf(value);
          }
        }
        when DATETIME {
          if (valueIsString) {
            value = Datetime.parse((String) value);
          }
        }
        when DATE {
          if (value instanceof Datetime) {
            value = ((Datetime) value).dateGmt();
          } else if (valueisString) {
            value = Date.parse((String) value);
          }
        }
      }
    }
    SObject updateRecord = RECORDS_TO_UPDATE.get(record.Id);
    if (updateRecord == null) {
      updateRecord = record.getSObjectType().newSObject(record.Id);
      RECORDS_TO_UPDATE.put(record.Id, updateRecord);
    }
    record.put(fieldToken, value);
    updateRecord.put(fieldToken, value);
  }

  private List<IDispatcher> fillDispatchers() {
    List<IDispatcher> dispatchers = new List<IDispatcher>();
    RollupPlugin__mdt dispatchPlugin = this.plugin.getInstance(DISPATCH_NAME);

    if (dispatchPlugin != null) {
      List<RollupPluginParameter__mdt> potentialRollupDispatchers = this.plugin.getMatchingParameters(dispatchPlugin.Id);
      potentialRollupDispatchers.add(new RollupPluginParameter__mdt(Value__c = DISPATCH_NAME));
      for (RollupPluginParameter__mdt pluginParameter : potentialRollupDispatchers) {
        this.fillDispatcher(dispatchers, pluginParameter.Value__c);
      }
    }

    return dispatchers;
  }

  private void dispatch(List<SObject> updatedRecords) {
    if (updatedRecords.isEmpty() == false && this.dispatchers.isEmpty() == false) {
      RollupLogger.Instance.log('dispatching updated records to: ' + this.getLogString(this.dispatchers), LoggingLevel.FINE);
      for (IDispatcher dispatcher : this.dispatchers) {
        dispatcher.dispatch(updatedRecords);
      }
    }
  }

  private String getLogString(List<IDispatcher> dispatchers) {
    String baseString = '';
    String delimiter = ', ';
    for (IDispatcher dispatcher : dispatchers) {
      // NB -if toString() has been overridden on an IDispatcher, the value of that (or the value before any colon in that string)
      // will be what gets displayed, but when a class doesn't override toString(), it starts off with something like
      // "RollupSObjectUpdater:..." where the ellipsis is actually a list of member variables. without proper reflection,
      // this is as good as it gets
      baseString += String.valueOf(dispatcher).split(':')[0] + delimiter;
    }
    return baseString.removeEnd(delimiter);
  }

  private void fillDispatcher(List<IDispatcher> dispatchers, String typeName) {
    IDispatcher dispatcher = (IDispatcher) Type.forName(typeName)?.newInstance();
    if (dispatcher != null) {
      dispatchers.add(dispatcher);
    }
  }

  private void splitUpdates(List<SObject> recordsToUpdate) {
    if (this.rollupControl.MaxParentRowsUpdatedAtOnce__c < recordsToUpdate.size() && this.forceSyncUpdate == false) {
      Integer maxIndexToRemove = recordsToUpdate.size() / 2;
      List<SObject> asyncUpdateList = new List<SObject>();
      while (recordsToUpdate.size() > maxIndexToRemove) {
        asyncUpdateList.add(recordsToUpdate.remove(recordsToUpdate.size() - 1));
      }
      this.performAsyncUpdate(asyncUpdateList);
    }
  }

  private void performAsyncUpdate(List<SObject> recordsToUpdate) {
    if (Limits.getLimitQueueableJobs() > Limits.getQueueableJobs() && recordsToUpdate.isEmpty() == false) {
      System.enqueueJob(new RollupAsyncSaver(recordsToUpdate, this.rollupControl));
    }
  }

  private void winnowRecords(List<SObject> records) {
    for (Integer index = records.size() - 1; index >= 0; index--) {
      Set<String> populatedFields = records.get(index).getPopulatedFieldsAsMap().keySet();
      if (populatedFields.size() == 1 && populatedFields.contains('Id')) {
        records.remove(index);
      }
    }
  }

  private void updateRecords(List<SObject> recordsToUpdate, Database.DMLOptions options) {
    RollupPlugin__mdt updaterPlugin = this.plugin.getInstance(UPDATER_NAME);
    IUpdater updater = (IUpdater) this.getInstanceOrDefault(updaterPlugin?.DeveloperName, IUpdater.class, DefaultUpdater.class);
    IPrePostUpdater preAndPostUpdater = this.getPreAndPostUpdater();
    preAndPostUpdater?.preUpdate(recordsToUpdate, options);
    updater.performUpdate(recordsToUpdate, options);
    preAndPostUpdater?.postUpdate(recordsToUpdate);
    this.forceSyncUpdate = false;
  }

  private IPrePostUpdater getPreAndPostUpdater() {
    RollupPlugin__mdt preAndPostUpdaterPlugin = this.plugin.getInstance(PRE_AND_POST_UPDATER_NAME);
    List<RollupPluginParameter__mdt> parameters = this.plugin.getMatchingParameters(preAndPostUpdaterPlugin?.Id);
    String typeName;

    for (RollupPluginParameter__mdt param : parameters) {
      typeName = param.Value__c;
    }
    return (IPrePostUpdater) this.getInstanceOrDefault(typeName, IPrePostUpdater.class, null);
  }

  private Object getInstanceOrDefault(String typeName, Type desiredType, Type defaultType) {
    Type potentialType;
    if (typeName != null) {
      potentialType = Type.forName(typeName);
    }
    // Type.isAssignableFrom is great, but it throws instead of returning false for null
    if (potentialType != null && desiredType.isAssignableFrom(potentialType)) {
      return potentialType.newInstance();
    }
    return defaultType?.newInstance();
  }

  private class SObjectTypeSorter implements System.Comparator<SObject> {
    public Integer compare(SObject first, SObject second) {
      Integer returnVal = 0;
      String firstSObjectType = String.valueOf(first.getSObjectType());
      String secondSObjectType = String.valueOf(second.getSObjectType());
      if (firstSObjectType > secondSObjectType) {
        returnVal = 1;
      } else if (secondSObjectType > firstSObjectType) {
        returnVal = -1;
      }
      return returnVal;
    }
  }

  private class RollupAsyncSaver implements System.Queueable {
    private final List<SObject> records;
    private final RollupControl__mdt control;
    public RollupAsyncSaver(List<SObject> records, RollupControl__mdt control) {
      this.records = records;
      this.control = control;
    }

    public void execute(System.QueueableContext qc) {
      System.attachFinalizer(new RollupFinalizer());
      RollupSObjectUpdater updater = new RollupSObjectUpdater();
      updater.addRollupControl(this.control);
      new RollupSObjectUpdater().doUpdate(this.records);
    }
  }

  private without sharing class DefaultUpdater implements IUpdater {
    @SuppressWarnings('PMD.ApexCrudViolation')
    public void performUpdate(List<SObject> recordsToUpdate, Database.DMLOptions options) {
      Database.update(recordsToUpdate, options);
    }
  }

  @SuppressWarnings('PMD.ApexCrudViolation')
  global without sharing class PreAndPostUpdater implements IPrePostUpdater {
    public void preUpdate(List<SObject> records, Database.DMLOptions options) {
      RollupSettings__c settings = RollupSettings__c.getInstance();
      settings.BypassValidationRules__c = true;
      Database.upsert(settings, false);
    }

    public void postUpdate(List<SObject> records) {
      RollupSettings__c settings = RollupSettings__c.getInstance();
      settings.BypassValidationRules__c = false;
      Database.upsert(settings, false);
    }
  }
}
